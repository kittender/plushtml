"use strict";var debug=PLUSHTMLDebug||!1;function removeChunk(e,o,t){return debug&&console.log("removeChunk(html,"+o+", "+t+")"),e.substring(0,o)+e.substr(t)}function pasteBefore(e,o,t){return debug&&console.log("pasteBefore(html,"+o+", contentStart)"),e.substring(0,t)+o+e.substr(t+1)}function pasteAfter(e,o,t){return debug&&console.log("pasteAfter(html,"+o+", contentEnd)"),e.substring(0,t)+o+e.substr(t)}function isChildrenOf(e,o){return debug&&console.log("isChildrenOf(parent,"+o+")"),e.match(new RegExp("<"+o))}function getTagPosition(e,o){if(debug&&console.log("getTagPosition(html,"+o+")"),!e||e.length<7||!o||0===o.length)return!1;const t=new RegExp("<"+o+"([ ]+[^>])*>"),r=new RegExp("</"+o+">");let n=e.match(t);if(n=!!n&&n[0],debug&&console.log(n),n){let s=e.match(r);if(s=!!s&&s[0],debug&&console.log(s),s){const o={start:e.search(t),end:e.search(r)+s.length,inner:{start:e.search(t)+n.length,end:e.search(r)}};return debug&&console.log(o),o}return"foot"===o&&console.log("CHIER"),console.error("PLUSHTMLParser: your code contains an unclosed <"+o+"> tag"),!1}return"foot"===o&&console.log("PUTAIN"),console.warn("PLUSHTMLParser: your code doesn't contain any <"+o+"> tag"),!1}function refreshShallowDOM(e,o,t){return debug&&console.log("refreshShallowDOM(html, dom)"),o.head=getTagPosition(e,"head"),o.body=getTagPosition(e,"body"),o.foot=!t&&getTagPosition(e,"foot"),debug&&(console.log(":::refreshed:::"),console.log(o)),o}function parsePlushtml(e){debug=debug||!1;let o=refreshShallowDOM(e,{});if(o.body){if(o.head){let t=getTagPosition(e,"header");if(t){if(!isChildrenOf(e.substring(o.head.start,o.head.end),"header"))return void console.error("PLUSHTMLParser: <header> must be a child of <head>");let r=e.substring(t.start,t.end),n=getTagPosition(e,"title");if(n){if(!isChildrenOf(r,"title"))return void console.error("PLUSHTMLParser: <title> must be a child of <header>");const t=e.substring(n.start,n.end);o=refreshShallowDOM(e=pasteBefore(e=e.replace("<title","<h1").replace("</title>","</h1>"),t,(o=refreshShallowDOM(e,o)).head.inner.start),o)}t=getTagPosition(e,"header"),r=e.substring(t.start,t.end),o=refreshShallowDOM(e=pasteBefore(e=removeChunk(e,t.start,t.end),r,(o=refreshShallowDOM(e,o)).body.inner.start),o)}else console.log("PLUSHTMLParser: your code does not contain a <header> tag")}else console.warn("PLUSHTMLParser: your code does not contain a <head> tag");if(o.foot){let t=getTagPosition(e,"footer");if(t){if(!isChildrenOf(e.substring(o.foot.start,o.foot.end),"footer"))return void console.error("PLUSHTMLParser: <footer> must be a child of <foot>");const r=e.substring(t.start,t.end);o=refreshShallowDOM(e=pasteAfter(e=removeChunk(e,t.start,t.end),r,(o=refreshShallowDOM(e,o)).body.inner.end),o);const n=e.substring(o.foot.inner.start,o.foot.inner.end);n&&n.length>0&&(o=refreshShallowDOM(e=pasteAfter(e=removeChunk(e,o.foot.start,o.foot.end),n,(o=refreshShallowDOM(e,o,!0)).body.inner.end),o,!0))}else console.log("PLUSHTMLParser: your code does not contain a <footer> tag")}else console.log("PLUSHTMLParser: your code does not contain a <foot> tag")}else console.warn("PLUSHTMLParser: your code should contain a <body> tag");return debug&&(console.log("-----PLUSHTMLParser result:"),console.log(e)),e}exports.plushtml=parsePlushtml;